apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-kapt'

group='com.github.BaturaMobile'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')


    implementation "com.android.support:appcompat-v7:$supportLibrary"
    implementation "com.android.support:design:$supportLibrary"

    implementation "com.android.support:recyclerview-v7:$supportLibrary"
    implementation "com.android.support:cardview-v7:$supportLibrary"

    implementation "com.squareup.picasso:picasso:$picasso"
    implementation "com.android.support.constraint:constraint-layout:$constraints"

    implementation project(':utils')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if(details.requested.group == 'com.android.support')
            {
                if(details.requested.name != 'multidex' && details.requested.name != 'multidex-instrumentation') {
                    details.useVersion "${supportLibrary}"
                }
            }
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

repositories {
    google()
    mavenCentral()
}