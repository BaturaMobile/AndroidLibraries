apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.BaturaMobile'

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.0 rc1'


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':design')
    implementation project(':utils')
    implementation "com.android.support.constraint:constraint-layout:$constraints"
    implementation "com.android.support:appcompat-v7:$supportLibrary"
    implementation "com.android.support:recyclerview-v7:$supportLibrary"
    implementation "com.google.android.gms:play-services-location:$playServices"
    implementation "com.google.firebase:firebase-core:$playServices"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger"
    implementation "com.google.dagger:dagger-android:$dagger"
    testImplementation "junit:junit:$junit"
    testImplementation("org.powermock:powermock-module-junit4:$powerMockJunit") {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$expresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "org.mockito:mockito-core:${mockitoCore}"
    testImplementation("org.powermock:powermock-api-mockito2:${powerMockJunit}") {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation "org.robolectric:robolectric:$robolectic"
    testImplementation "org.robolectric:shadows-support-v4:$robolectic"
    testImplementation "org.khronos:opengl-api:${khronosOpengl}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if(details.requested.group == 'com.android.support')
            {
                if(details.requested.name != 'multidex' && details.requested.name != 'multidex-instrumentation') {
                    details.useVersion "${supportLibrary}"
                }
            }
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

repositories {
    google()
    mavenCentral()
}